name: CI/CD Post Domain Microservices (split jobs)

on:
  push:
    branches: [test, main]
    paths:
      - 'create-post/**'
      - 'update-post/**'
      - 'get-post-by-id/**'
      - 'get-all-post/**'
      - 'delete-post/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'create-post/**'
      - 'update-post/**'
      - 'get-post-by-id/**'
      - 'get-all-post/**'
      - 'delete-post/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      create_post: ${{ steps.filter.outputs.create_post }}
      update_post: ${{ steps.filter.outputs.update_post }}
      get_post_by_id: ${{ steps.filter.outputs.get_post_by_id }}
      get_all_post: ${{ steps.filter.outputs.get_all_post }}
      delete_post: ${{ steps.filter.outputs.delete_post }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            create_post:
              - 'create-post/**'
            update_post:
              - 'update-post/**'
            get_post_by_id:
              - 'get-post-by-id/**'
            get_all_post:
              - 'get-all-post/**'
            delete_post:
              - 'delete-post/**'

  #---------------------- CREATE-POST ----------------------
  test_create_post:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for create-post
        working-directory: ./create-post
        run: |
          cat <<EOF > .env
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./create-post
        run: |
          npm install
          npm test

  build_and_push_create_post:
    needs: test_create_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build and push create-post image using docker compose
        run: |
          docker compose build create-post
          docker compose push create-post

  deploy_create_post_test:
    needs: build_and_push_create_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_post == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy create-post to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop create-post || true
            docker rm create-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-post:latest

            docker run -d --name create-post \
              -p 4001:4001 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-post:latest

  deploy_create_post_prod:
    needs: build_and_push_create_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_post == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy create-post to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop create-post || true
            docker rm create-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-post:latest

            docker run -d --name create-post \
              -p 4001:4001 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-post:latest

  #---------------------- UPDATE-POST ----------------------
  test_update_post:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for update-post
        working-directory: ./update-post
        run: |
          cat <<EOF > .env
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./update-post
        run: |
          npm install
          npm test

  build_and_push_update_post:
    needs: test_update_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build and push update-post image using docker compose
        run: |
          docker compose build update-post
          docker compose push update-post

  deploy_update_post_test:
    needs: build_and_push_update_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_post == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy update-post to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop update-post || true
            docker rm update-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-post:latest

            docker run -d --name update-post \
              -p 4002:4002 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-post:latest

  deploy_update_post_prod:
    needs: build_and_push_update_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_post == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy update-post to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop update-post || true
            docker rm update-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-post:latest

            docker run -d --name update-post \
              -p 4002:4002 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-post:latest

  #---------------------- GET-POST-BY-ID ----------------------
  test_get_post_by_id:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_post_by_id == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for get-post-by-id
        working-directory: ./get-post-by-id
        run: |
          cat <<EOF > .env
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./get-post-by-id
        run: |
          npm install
          npm test

  build_and_push_get_post_by_id:
    needs: test_get_post_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_post_by_id == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build and push get-post-by-id image using docker compose
        run: |
          docker compose build get-post-by-id
          docker compose push get-post-by-id

  deploy_get_post_by_id_test:
    needs: build_and_push_get_post_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_post_by_id == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-post-by-id to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop get-post-by-id || true
            docker rm get-post-by-id || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-post-by-id:latest

            docker run -d --name get-post-by-id \
              -p 4003:4003 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-post-by-id:latest

  deploy_get_post_by_id_prod:
    needs: build_and_push_get_post_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_post_by_id == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-post-by-id to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop get-post-by-id || true
            docker rm get-post-by-id || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-post-by-id:latest

            docker run -d --name get-post-by-id \
              -p 4003:4003 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-post-by-id:latest

  #---------------------- GET-ALL-POST ----------------------
  test_get_all_post:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for get-all-post
        working-directory: ./get-all-post
        run: |
          cat <<EOF > .env
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./get-all-post
        run: |
          npm install
          npm test

  build_and_push_get_all_post:
    needs: test_get_all_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build and push get-all-post image using docker compose
        run: |
          docker compose build get-all-post
          docker compose push get-all-post

  deploy_get_all_post_test:
    needs: build_and_push_get_all_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_post == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-all-post to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop get-all-post || true
            docker rm get-all-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-post:latest

            docker run -d --name get-all-post \
              -p 4004:4004 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-post:latest

  deploy_get_all_post_prod:
    needs: build_and_push_get_all_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_post == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-all-post to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop get-all-post || true
            docker rm get-all-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-post:latest

            docker run -d --name get-all-post \
              -p 4004:4004 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-post:latest

  #---------------------- DELETE-POST ----------------------
  test_delete_post:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for delete-post
        working-directory: ./delete-post
        run: |
          cat <<EOF > .env
          AWS_REGION=${{ secrets.AWS_REGION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          POST_DB_NAME=${{ secrets.POST_DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./delete-post
        run: |
          npm install
          npm test

  build_and_push_delete_post:
    needs: test_delete_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_post == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Build and push delete-post image using docker compose
        run: |
          docker compose build delete-post
          docker compose push delete-post

  deploy_delete_post_test:
    needs: build_and_push_delete_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_post == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy delete-post to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop delete-post || true
            docker rm delete-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-post:latest

            docker run -d --name delete-post \
              -p 4005:4005 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-post:latest

  deploy_delete_post_prod:
    needs: build_and_push_delete_post
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_post == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy delete-post to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_POST_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          port: 22
          script: |
            export AWS_REGION="${{ secrets.AWS_REGION }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export POST_DB_NAME="${{ secrets.POST_DB_NAME }}"
            export PET_DB_NAME="${{ secrets.PET_DB_NAME }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker stop delete-post || true
            docker rm delete-post || true

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-post:latest

            docker run -d --name delete-post \
              -p 4005:4005 \
              -e AWS_REGION=$AWS_REGION \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_PORT=$DB_PORT \
              -e POST_DB_NAME=$POST_DB_NAME \
              -e PET_DB_NAME=$PET_DB_NAME \
              -e JWT_SECRET=$JWT_SECRET \
              -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-post:latest
